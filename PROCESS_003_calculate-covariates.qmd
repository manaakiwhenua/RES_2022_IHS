---
title: "Data for testing IHS"
format: 
  html:
    theme: cosmo
    self-contained: true
    fig-align: center
    css: styles.css
editor: visual
bibliography: references.bib
knitr:
  opts_chunk:
    comment: "#>"
    collapse: true
    fig.align: 'center'
    fig.show: 'hold'
    results: 'hold'
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(terra)
library(sf)
library(leaflet)
library(whitebox)
library(scico)
```

## Calculating covariates

May as well start with the same set as the source papers - slope, curvatures, TWI ¯\\\_(ツ)\_/¯

Using [whitebox](https://www.whiteboxgeo.com/manual/wbt_book/available_tools/geomorphometric_analysis.html#Slope) here as it's geomorphometry algorithms apparently handle outliers/noise better in DEMs with projected coordinate systems vs the algorithms implemented in `terra::terrain()`.

```{r}
elev_dir <- file.path('data_spatial', 'elevation')
if(!dir.exists(file.path('data_spatial', 'terrain_morphometry'))) {
  dir.create(file.path('data_spatial', 'terrain_morphometry'))
}
terr_dir <- file.path('data_spatial', 'terrain_morphometry')

wbt_slope(
  dem    = file.path(elev_dir, 'Lidar_FPS_1m.tif'),
  output = file.path(terr_dir, 'Slope_1m.tif'),
  units  = "degrees",
  wd     = getwd(),
  compress_rasters = TRUE)

wbt_plan_curvature(
  dem    = file.path(elev_dir, 'Lidar_FPS_1m.tif'),
  output = file.path(terr_dir, 'PlanC_1m.tif'),
  log    = FALSE,
  wd     = getwd(),
  compress_rasters = TRUE)

wbt_profile_curvature(
  dem = file.path(elev_dir, 'Lidar_FPS_1m.tif'),
  output = file.path(terr_dir, 'ProfC_1m.tif'),
  log = FALSE,
  wd = getwd(),
  compress_rasters = TRUE
)

slope <- rast(file.path(terr_dir, 'Slope_1m.tif'))
planc <- rast(file.path(terr_dir, 'PlanC_1m.tif'))
profc <- rast(file.path(terr_dir, 'ProfC_1m.tif'))
```

TWI is a little more complicated as the DEM needs to be hydrologically corrected first.

```{r}
# breach depressions (less interferey than filling sinks)
wbt_breach_depressions_least_cost(
  dem = file.path(elev_dir, 'Lidar_FPS_1m.tif'),
  output = file.path(elev_dir, 'Lidar_FPS_BD_1m.tif'),
  dist = 250,
  max_cost = NULL,
  min_dist = TRUE,
  flat_increment = NULL,
  fill = TRUE,
  wd = getwd(),
  compress_rasters = FALSE
)

dem <- rast(file.path(elev_dir, 'Lidar_FPS_1m.tif'))
dem_bd <- rast(file.path(elev_dir, 'Lidar_FPS_BD_1m.tif'))

# check diff
dem_diff <- dem_bd - dem
dem_diff[dem_diff == 0] <- NA
```

Differences after breaching range between `r round(min(values(dem_diff), na.rm = TRUE),2)` m and `r round(max(values(dem_diff), na.rm = TRUE),2)` m and are largely confined to single-pixel channels in open water, so that's fine.

```{r}
#| column: screen-inset
#| echo: false

hs_fps <- rast(file.path(elev_dir, 'hillshade_FPS_1m.tif'))
pal <- colorBin(palette = scico(50, palette = 'lajolla'),
                bins = 5,
                domain = unique(values(dem_diff), na.rm = TRUE),
                na.color = NA)

leaflet() %>%
  addTiles(urlTemplate = "https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=c01gasx5z7qptvpjrc85ysfjzbj",
           attribution = "© 2021 Land Information New Zealand",
           group = 'Base Image') %>% 
  addRasterImage(x = hs_fps, 
                 opacity = 0.5, 
                 colors = grey(0:255/256),
                 group = 'Hillshade') %>%
  addRasterImage(x = dem_diff, 
                 opacity = 0.5, 
                 colors = pal,
                 group = 'DEM alterations (m)') %>% 
  addLayersControl(overlayGroups = c('Base Image', 'Hillshade',
                                     'DEM alterations (m)'),
                   options = layersControlOptions(collapsed = FALSE)) %>% 
  addLegend(position = 'bottomright',
            pal = pal,
            values = values(dem_diff),
            title = 'DEM alterations (m)',
            opacity = 0.8)
  
```

```{r}
# for TWI, slope needs to also come from the breached DEM
# for consistency
wbt_slope(
  dem    = file.path(elev_dir, 'Lidar_FPS_BD_1m.tif'),
  output = file.path(terr_dir, 'Slope_BD_1m.tif'),
  units  = "degrees",
  wd     = getwd(),
  compress_rasters = TRUE)

wbt_d_inf_flow_accumulation(
  input     = file.path(elev_dir, 'Lidar_FPS_BD_1m.tif'),
  output    = file.path(terr_dir, 'Dinf_SCA_1m.tif'),
  out_type  = "sca",
  threshold = NULL,
  log       = FALSE,
  clip      = FALSE,
  pntr      = FALSE,
  wd        = getwd(),
  compress_rasters = TRUE)

wbt_wetness_index(
  sca   = file.path(terr_dir, 'Dinf_SCA_1m.tif'),
  slope = file.path(terr_dir, 'Slope_BD_1m.tif'),
  output = file.path(terr_dir, 'TWI_1m.tif'),
  wd = getwd(),
  compress_rasters = TRUE
)

twi <- rast(file.path(terr_dir, 'TWI_1m.tif'))
```

```{r}
#| column: screen-inset
#| echo: false

pal <- colorBin(palette = scico(50, palette = 'batlow'),
                bins = 10,
                domain = unique(values(twi), na.rm = TRUE),
                na.color = NA)

leaflet() %>%
  addTiles(urlTemplate = "https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=c01gasx5z7qptvpjrc85ysfjzbj",
           attribution = "© 2021 Land Information New Zealand",
           group = 'Base Image') %>% 
  addRasterImage(x = hs_fps, 
                 opacity = 0.5, 
                 colors = grey(0:255/256),
                 group = 'Hillshade') %>%
  addRasterImage(x = twi, 
                 opacity = 0.5, 
                 colors = pal,
                 group = 'TWI') %>% 
  addLayersControl(
    overlayGroups = c('Base Image', 'Hillshade', 'TWI'),
    options = layersControlOptions(collapsed = FALSE)) %>% 
  addLegend(position = 'bottomright',
            pal = pal,
            values = values(dem_diff),
            title = 'TWI',
            opacity = 0.8)
```

Not so sure I like this output, but it gives us something to cluster...
